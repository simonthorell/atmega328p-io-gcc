name: AVR Build and Release

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md' # Ignore markdown changes in PRs for builds

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # required for github-action-get-previous-tag
      
      # Build the Docker image from Dockerfile in the .devcontainer directory
      - name: Build Docker Image
        run: docker build .devcontainer --file .devcontainer/Dockerfile --tag my-dev-container

      # Run commands inside the Docker container
      - name: Configure CMake
        run: docker run --rm -v $PWD:/project -w /project my-dev-container cmake -S . -B build

      - name: Build
        run: |
          docker run --rm -v $PWD:/project -w /project my-dev-container mkdir -p build
          docker run --rm -v $PWD:/project -w /project my-dev-container cmake --build build

      # Archive the compiled artifacts for upload
      - name: Archive Production Artifacts for Upload
        uses: actions/upload-artifact@v2
        with:
          name: compiled-artifacts
          path: |
            build/*.hex
            build/*.elf

      # Get latest release number
      - name: Get Previous tag
        id: previoustag
        uses: 'WyriHaximus/github-action-get-previous-tag@v1'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get next version
        id: next
        uses: 'WyriHaximus/github-action-next-release-version@1.0.0'
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      # Create a release and upload the compiled artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.next.outputs.version }}
          release_name: Release ${{ steps.next.outputs.version }}
          draft: false # Make the release public (true makes it visible only to collaborators)
          prerelease: false # Indicate that this is unstable pre-release

      - name: Upload .HEX File to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/avr-firmware.hex
          asset_name: avr-firmware.hex
          asset_content_type: application/octet-stream

      - name: Upload .ELF File to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/avr-firmware.elf
          asset_name: avr-firmware.elf
          asset_content_type: application/octet-stream